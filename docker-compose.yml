version: "3.8"

services:
  iotdb:
    image: apache/iotdb:1.3.0-standalone
    container_name: iotflow_iotdb
    ports:
      - "6667:6667"    # IoTDB client port
      - "8181:8181"    # IoTDB web interface (if enabled)
    environment:
      - IOTDB_CONFIG_DIR=/iotdb/conf
    volumes:
      - iotdb_data:/iotdb/data
      - iotdb_logs:/iotdb/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 bash -c '</dev/tcp/localhost/6667' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: iotflow_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MQTT Broker - Eclipse Mosquitto
  mosquitto:
    image: eclipse-mosquitto:2.0.22-openssl
    container_name: iotflow_mosquitto
    ports:
      - "1883:1883"    # MQTT port
      - "9001:9001"    # WebSocket port
      - "8883:8883"    # MQTT SSL port
    volumes:
      - ./mqtt/config:/mosquitto/config
      - ./mqtt/data:/mosquitto/data
      - ./mqtt/logs:/mosquitto/log
      - mosquitto_data:/mosquitto/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'health check' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus service for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: iotflow_prometheus
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "9090:9090"
    volumes:
      - /home/chameau/prometheus:/etc/prometheus
    restart: unless-stopped

  # mqtt_exporter:
  #   image: kpetrem/mqtt-exporter:master
  #   container_name: iotflow_mqtt_exporter
  #   environment:
  #     - MQTT_ADDRESS=192.168.0.1
  #     - MQTT_TOPIC=\$SYS/#
  #   ports:
  #     - "9423:9423"
  #   restart: unless-stopped



  # Grafana dashboard for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: iotflow_grafana
    ports:
      - "3333:3000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped

  # Node Exporter for host metrics (CPU, memory, disk)
  node_exporter:
    image: prom/node-exporter:latest
    container_name: iotflow_node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"
      
    extra_hosts:
      - "host.docker.internal:host-gateway"

    ports:
      - "9100:9100"
    restart: unless-stopped

  # IoTFlow Connectivity Layer application
  iot_connectivity:
    build: .
    container_name: iotflow_connectivity
    # If you prefer to use a pre-built image, replace the `build` key with:
    image: connectivity-layer-app:gunicorn

    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - HOST=0.0.0.0
      - PORT=5000
      - REDIS_URL=redis://redis:6379/0
      - IOTDB_HOST=iotdb
      - IOTDB_PORT=6667
      - IOTDB_USERNAME=root
      - IOTDB_PASSWORD=root
      - MQTT_HOST=mosquitto
      - MQTT_PORT=1883
      # Optional: set admin token for locust/grafana tests
      - IOTFLOW_ADMIN_TOKEN=test
    depends_on:
      redis:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
      iotdb:
        condition: service_healthy
      prometheus:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  iotdb_data:
    driver: local
  iotdb_logs:
    driver: local
  redis_data:
    driver: local
  mosquitto_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
