name: IoTFlow CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      mosquitto:
        image: eclipse-mosquitto:latest
        ports:
          - 1883:1883
          - 9001:9001
        options: >-
          --health-cmd "mosquitto_sub -t '$SYS/broker/uptime' -C 1 -h localhost || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8

    # - name: Lint with flake8
    #   run: |
    #     # Stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # Exit-zero treats all errors as warnings
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # - name: Wait for services to be ready
    #   run: |
    #     # Wait for Redis
    #     timeout 30s bash -c 'until redis-cli -h localhost ping; do sleep 1; done'
    #     # Wait for Mosquitto
    #     timeout 30s bash -c 'until mosquitto_pub -h localhost -t test -m "hello"; do sleep 1; done'

    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379
        MOSQUITTO_HOST: localhost
        MOSQUITTO_PORT: 1883
        FLASK_ENV: testing
      run: |
        python app.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: your-dockerhub-username/flask-app
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create docker-compose for testing
      run: |
        cat > docker-compose.test.yml << EOF
        version: '3.8'
        services:
          app:
            image: your-dockerhub-username/flask-app:${{ github.sha }}
            ports:
              - "5000:5000"
            environment:
              - REDIS_URL=redis://redis:6379
              - MOSQUITTO_HOST=mosquitto
              - MOSQUITTO_PORT=1883
            depends_on:
              - redis
              - mosquitto
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
              interval: 30s
              timeout: 10s
              retries: 3

          redis:
            image: redis:alpine
            ports:
              - "6379:6379"

          mosquitto:
            image: eclipse-mosquitto:latest
            ports:
              - "1883:1883"
              - "9001:9001"
        EOF

    - name: Run integration tests
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
        # Basic health check
        curl -f http://localhost:5000/health || exit 1
        
        # Add more integration tests here
        # docker-compose -f docker-compose.test.yml exec -T app python -m pytest integration_tests/
        
        docker-compose -f docker-compose.test.yml down

  deploy:
    needs: [test, build, integration-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # For example, using kubectl, terraform, or SSH to your server
        
    - name: Notify deployment
      run: |
        echo "Deployment completed successfully!"
        # Add notification logic (Slack, email, etc.)