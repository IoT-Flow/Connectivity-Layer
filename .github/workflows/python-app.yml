name: IoTFlow CI

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      iotdb:
        image: apache/iotdb:2.0.4-standalone
        ports:
          - 6667:6667
          - 31999:31999
        env:
          MAX_HEAP_SIZE: "1G"
          HEAP_NEWSIZE: "500M"
          JVM_XMX: "1G"
          JVM_XMS: "500M"
        options: >-
          --health-cmd "nc -z localhost 6667 || exit 1"
          --health-interval 20s
          --health-timeout 30s
          --health-retries 20
          --memory 2g

      mqtt:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        options: >-
          --health-cmd "timeout 5 bash -c '</dev/tcp/localhost/1883' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup MQTT config
      run: |
        mkdir -p /tmp/mosquitto/config
        cat > /tmp/mosquitto/config/mosquitto.conf << EOL
        listener 1883
        allow_anonymous true
        log_type error
        EOL

    - name: Setup environment
      run: |
        cp .env.example .env || touch .env
        cat >> .env << EOL
        FLASK_ENV=testing
        TESTING=true
        DATABASE_URL=sqlite:///test_iotflow.db
        REDIS_URL=redis://localhost:6379/1
        IOTDB_HOST=localhost
        IOTDB_PORT=6667
        IOTDB_USERNAME=root
        IOTDB_PASSWORD=root
        IOTDB_DATABASE=root.iotflow
        MQTT_HOST=localhost
        MQTT_PORT=1883
        IOTFLOW_ADMIN_TOKEN=test_token
        EOL

    - name: Install tools for debugging
      run: |
        sudo apt-get update
        sudo apt-get install -y netcat-openbsd curl jq

    - name: Wait for services
      run: |
        echo "Waiting for services to be ready..."
        # Check Redis
        echo "Checking Redis..."
        timeout 60 bash -c 'until nc -z localhost 6379; do echo "Waiting for Redis..."; sleep 2; done'
        redis-cli ping
        
        # Check IoTDB (more thorough check)
        echo "Checking IoTDB..."
        echo "Allowing more time for IoTDB initialization..."
        # More generous timeout for IoTDB (up to 2 minutes)
        timeout 120 bash -c 'until nc -z localhost 6667; do echo "Waiting for IoTDB..."; sleep 5; done'
        echo "Port 6667 is now open, waiting 15s more for full IoTDB startup..."
        sleep 15  # Give IoTDB more time to fully initialize after port is open
        
        # List running Docker containers to debug
        echo "Running containers:"
        docker ps -a
        
        # Check IoTDB logs for any errors
        echo "IoTDB container logs:"
        docker logs $(docker ps -a | grep iotdb | awk '{print $1}') 2>&1 | tail -n 100
        
        # Check MQTT
        echo "Checking MQTT..."
        timeout 60 bash -c 'until nc -z localhost 1883; do echo "Waiting for MQTT..."; sleep 2; done'
        echo "All services are ready!"

    - name: Run linting
      run: |
        pip install flake8 black
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check src/

    - name: Verify IoTDB connection
      run: |
        chmod +x .github/workflows/verify-iotdb.sh
        ./.github/workflows/verify-iotdb.sh

    - name: Initialize database
      run: |
        echo "y" | python init_db.py

    - name: Run unit tests
      run: |
        python -m pytest tests/ -v --tb=short
      if: always()

    - name: Start application
      run: |
        python app.py &
        sleep 15
        # Verify app is running
        curl -f http://localhost:5000/health || exit 1

    - name: Run end-to-end tests
      run: |
        python tests/test_end_to_end.py

    - name: Generate coverage report
      run: |
        pip install coverage
        coverage run -m pytest tests/
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
      if: always()

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          logs/
          *.log
          test-results.xml
      if: always()