# IoTFlow Connectivity Layer CI Pipeline
# Tests end-to-end functionality with IoTDB, MQTT, and Redis services

name: IoTFlow CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      iotdb:
        image: apache/iotdb:1.3.0-standalone
        ports:
          - 6667:6667
        options: >-
          --health-cmd "nc -z localhost 6667 || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
      
      mqtt:
        image: eclipse-mosquitto:2.0
        ports:
          - 1883:1883
        volumes:
          - /tmp/mosquitto/config:/mosquitto/config
        options: >-
          --health-cmd "timeout 5 bash -c '</dev/tcp/localhost/1883' || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.3"
        
    - name: Create mosquitto config for CI
      run: |
        # Create minimal mosquitto config for CI
        mkdir -p /tmp/mosquitto/config
        cat > /tmp/mosquitto/config/mosquitto.conf << EOL
        # CI Mosquitto Configuration
        listener 1883
        allow_anonymous true
        log_type all
        EOL
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Setup environment
      run: |
        # Create .env file with test configuration
        echo "# IoT Connectivity Layer Test Environment" > .env
        echo "FLASK_APP=app.py" >> .env
        echo "FLASK_ENV=testing" >> .env
        echo "FLASK_DEBUG=True" >> .env
        echo "SECRET_KEY=test-secret-key" >> .env
        echo "JWT_SECRET_KEY=test-jwt-key" >> .env
        echo "HOST=0.0.0.0" >> .env
        echo "PORT=5000" >> .env
        echo "DATABASE_URL=sqlite:///iotflow.db" >> .env
        echo "REDIS_URL=redis://localhost:6379/0" >> .env
        echo "IOTDB_HOST=localhost" >> .env
        echo "IOTDB_PORT=6667" >> .env
        echo "IOTDB_USERNAME=root" >> .env
        echo "IOTDB_PASSWORD=root" >> .env
        echo "IOTDB_DATABASE=root.iotflow" >> .env
        echo "MQTT_HOST=localhost" >> .env
        echo "MQTT_PORT=1883" >> .env
        # For CI we're using anonymous access
        echo "MQTT_USERNAME=" >> .env
        echo "MQTT_PASSWORD=" >> .env
        echo "MQTT_CLIENT_ID=iotflow_ci_test" >> .env
        echo "IOTFLOW_ADMIN_TOKEN=test" >> .env
        
        cat .env
    
    
    
    - name: Check service health
      run: |
        echo "Checking Redis..."
        redis-cli ping
        
        echo "Checking IoTDB..."
        nc -zv localhost 6667
        
        echo "Checking MQTT..."
        nc -zv localhost 1883
        
        echo "Installing MQTT client for testing..."
        pip install paho-mqtt
        
        echo "Running MQTT connection test script..."
        chmod +x scripts/mqtt_ci_test.py
        python scripts/mqtt_ci_test.py
        
    - name: Initialize database
      run: |
        echo "Initializing database..."
        echo "y" | python init_db.py
    
    - name: Start application in background
      run: |
        python app.py &
        # Give app time to start
        sleep 10
    
    - name: Run end-to-end tests
      run: |
        # Add more debugging before running tests
        echo "===== Environment Status ====="
        echo "Flask app status:"
        curl -s http://localhost:5000/health || echo "Flask app not responding"
        
        echo "===== Running Tests ====="
        python tests/test_end_to_end.py
    
    - name: Upload test logs
      uses: actions/upload-artifact@v4
      with:
        name: test-logs
        path: logs/
      if: always()
